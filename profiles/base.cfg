[buildout]
index = https://pypi.python.org/simple

extends =
    versions.cfg
    project.cfg

parts =
    mkdirs
    scripts
    circus.ini
    circusd
    circusctl
    couchdb.ini
    auctions.ini
    proxy.ini
    redis.conf
    sentinel.conf
    auctions_data_bridge.yaml
    auctions_chronograph.yaml
    oauth_provider.ini
    auction_worker_defaults.yaml
    auction_worker_insider.yaml
    auction_worker_texas.yaml

find-links =
    http://op:x9W3jZ@dist.quintagroup.com/op/
    http://dist.quintagroup.com/proxy/pypi/

[ports]
recipe = teamrubber.recipe.portbase
base = 9000

[config-from-template]
recipe = sact.recipe.jinjatemplate
template-file = profiles/templates/${:_buildout_section_name_}
target-file = etc/${:_buildout_section_name_}


[mkdirs]
recipe =  z3c.recipe.mkdir
paths =
    ${buildout:directory}/var/log
    ${buildout:directory}/var/redis
    ${buildout:directory}/var/sentinel
    ${buildout:directory}/var/couchdb
    ${buildout:directory}/var/log/nginx

[scripts]
recipe = zc.recipe.egg
eggs =
    Paste
    PasteScript
    PasteDeploy
    openprocurement.auction[test]
    openprocurement.auction.worker
    openprocurement.auction.insider
    openprocurement.auction.texas
    openprocurement.auth
    CouchDB
    openprocurement.circus.plugins
    circus
    circus-web
    gunicorn
    chaussette
    gevent-websocket
    ExtendedJournalHandler
    request_id_middleware
    penstock
    powerranger

interpreter = python_interpreter

[circusd]
<=scripts
initialization =
    sys.argv[1:1] = ('${buildout:directory}/etc/circus.ini').split()
interpreter = circusd_python
scripts = circusd

[circusctl]
<=scripts
interpreter =
initialization =
    sys.argv[1:1] = ('--endpoint ${circus.ini:endpoint}').split()
scripts = circusctl

[circus.ini]
<= config-from-template
statsd = 0
httpd = 0
httpd_host = 0.0.0.0
httpd_port = ${ports:8}
endpoint = ipc://${buildout:directory}/var/circus_endpoint
pubsub_endpoint = ipc://${buildout:directory}/var/circus_pubsub
stats_endpoint = ipc://${buildout:directory}/var/circus_stats
auctions_server_port = ${ports:1}
auth_server_port = ${ports:3}

[couchdb.ini]
<= config-from-template
port = ${ports:0}
host = ${project:couchdb_host}
couchdb_admin = ${project:couchdb_admin}
couchdb_password = ${project:couchdb_password}
munin_password = ${project:munin_password}
with_couchdb_replicate = ${project:with_couchdb_replicate}

[auctions.ini]
<= config-from-template
host = 0.0.0.0
port = ${ports:1}
workers = ${project:auctions_server_workeres}
redis_url = redis://:${project:redis_password}@${project:redis_host}:${ports:2}/${project:redis_mapping_db}
redis_password = ${project:redis_password}
redis_database = ${project:redis_mapping_db}
sentinel_cluster_name = ${project:sentinel_cluster_name}
external_couch_url = http://localhost:${ports:1}/auction
internal_couch_url = http://${project:couchdb_admin}:${project:couchdb_password}@localhost:${ports:0}/
proxy_internal_couch_url = http://localhost:${ports:0}/
auctions_db =  ${project:auctions_couchdb_databese_name}
sentinels_list = ${project:sentinels_list}
timezone = ${project:timezone}
HASH_SECRET_KEY = ${project:hash_secret_key}
preferred_url_scheme = http
debug = 1
auto_build = 1
limit_replications_progress = ${project:limit_replications_progress}
limit_replications_func = ${project:limit_replications_func}

[proxy.ini]
<= config-from-template
host = 0.0.0.0
port = ${ports:11}
workers = 1
couchdb_url = http://${project:couchdb_admin}:${project:couchdb_password}@localhost:${ports:0}/
auctions_db = ${project:auctions_couchdb_databese_name}


[redis.conf]
<= config-from-template
port = ${ports:2}
dir = ${buildout:directory}/var/redis
host = ${project:redis_host}
password = ${project:redis_password}

[sentinel.conf]
<= config-from-template
host = ${project:sentinel_host}
port = ${ports:7}
quorum = ${project:sentinel_quorum}
sentinel_cluster_name = ${project:sentinel_cluster_name}
redis_master_host = ${project:redis_master_host}
redis_port = ${redis.conf:port}
redis_password = ${project:redis_password}

[auctions_data_bridge.yaml]
<= config-from-template
resource_api_url = ${project:resource_api_url}
resource_api_version = ${project:resource_api_version}
resource_api_token = ${project:resource_api_token}
resource_name = ${project:resource_name}
couch_url = http://${project:couchdb_admin}:${project:couchdb_password}@${project:couchdb_host}:${ports:0}/
auctions_db = ${project:auctions_couchdb_databese_name}
timezone = ${project:timezone}
down_requests_sleep = ${project:databridge_down_requests_sleep}
up_requests_sleep = ${project:databridge_up_requests_sleep}
up_wait_sleep = ${project:databridge_up_wait_sleep}
up_wait_sleep_min = ${project:databridge_up_wait_sleep_min}
queue_size = ${project:databridge_queue_size}

[auctions_chronograph.yaml]
<= config-from-template
resource_api_url = ${project:resource_api_url}
resource_api_version = ${project:resource_api_version}
resource_api_token = ${project:resource_api_token}
resource_name = ${project:resource_name}
couch_url = http://${project:couchdb_admin}:${project:couchdb_password}@${project:couchdb_host}:${ports:0}/
auctions_db = ${project:auctions_couchdb_databese_name}
timezone = ${project:timezone}
limit_auctions = ${project:limit_auctions}
limit_free_memory = ${project:limit_free_memory}
use_consul = True


[auction_worker_configs]
auction_worker_config_for_api_version_dev = ${buildout:directory}/etc/auction_worker_defaults.yaml


[oauth_provider.ini]
<= config-from-template
host = 0.0.0.0
port = ${ports:3}
workers = ${project:auth_server_workeres}
redis = redis://:${project:redis_password}@${project:redis_host}:${ports:2}/${project:redis_auth_db}
redis_password = ${project:redis_password}
redis_database = ${project:redis_auth_db}
sentinels_list = ${project:sentinels_list}
sentinel_cluster_name = ${project:sentinel_cluster_name}
secret = 1234567
hash_secret_key = ${project:hash_secret_key}
signature_oauth_key = ${project:signature_key}
timezone = ${project:timezone}
auction_url = ${project:auction_url}
auction_client_id = ${project:auction_client_id}
auction_client_secret = ${project:auction_client_secret}

[auction_worker_defaults.yaml]
<= config-from-template
resource_api_url = ${project:resource_api_url}
resource_api_version = ${project:resource_api_version}
resource_api_token = ${project:resource_api_token}
resource_name = ${project:resource_name}
AUCTIONS_URL = ${project:auction_url}/auctions/{auction_id}
HASH_SECRET = ${project:hash_secret_key}
SIGNATURE_KEY = ${project:signature_key}
COUCH_DATABASE = http://${project:couchdb_admin}:${project:couchdb_password}@${project:couchdb_host}:${ports:0}/${project:auctions_couchdb_databese_name}
OAUTH_CLIENT_ID = ${project:auction_client_id}
OAUTH_CLIENT_SECRET = ${project:auction_client_secret}
OAUTH_BASE_URL = ${project:oauth_url}/api/
OAUTH_REQUEST_TOKEN_URL =
OAUTH_ACCESS_TOKEN_URL = ${project:oauth_url}/oauth/token
OAUTH_AUTHORIZE_URL = ${project:oauth_url}/oauth/authorize
TZ = ${project:timezone}
STARTS_PORT = ${ports:10}
REDIS_URL = redis://:${project:redis_password}@${project:redis_host}:${ports:2}/${project:redis_mapping_db}
redis_password = ${project:redis_password}
redis_database = ${project:redis_mapping_db}
sentinel_cluster_name = ${project:sentinel_cluster_name}
sentinels_list = ${project:sentinels_list}
WORKER_BIND_IP = ${project:worker_bind_ip}
planning_procerude = ${project:planning_procerude}
sandbox_mode = ${project:worker_sandbox_mode}
with_document_service = ${project:with_document_service}
document_service_url =  ${project:document_service_url}
document_service_username = ${project:document_service_username}
document_service_password = ${project:document_service_password}

[auction_worker_insider.yaml]
<= auction_worker_defaults.yaml
AUCTIONS_URL = ${project:auction_url}/insider-auctions/{auction_id}
sandbox_mode = ${project:worker_insider_sandbox_mode}

[auction_worker_texas.yaml]
<= auction_worker_defaults.yaml
sandbox_mode = ${project:worker_texas_sandbox_mode}
AUCTIONS_URL = http://localhost:8090/texas-auctions/{auction_id}

[dutch]
auction_worker = ${buildout:bin-directory}/auction_insider
auction_worker_config = ${buildout:directory}/etc/auction_worker_insider.yaml
procurement_method_types = ${project:dutch}

[english]
auction_worker = ${buildout:bin-directory}/auction_worker
auction_worker_config = ${buildout:directory}/etc/auction_worker_defaults.yaml
procurement_method_types = ${project:english}

[texas]
auction_worker = ${buildout:bin-directory}/auction_texas
auction_worker_config = ${buildout:directory}/etc/auction_worker_texas.yaml
procurement_method_types = ${project:texas}


[download_loggly_pipe]
recipe = hexagonit.recipe.download
url = https://raw.githubusercontent.com/quintagroup/loggly-pipe/master/loggly_pipe.py
download-only = true
destination = ${buildout:bin-directory}

[preapre_loggly_script]
<= config-from-template
target-file = ${buildout:bin-directory}/journal_to_loggly
target-executable = 1
api_key =

[start_replication_script]
<= config-from-template
target-file = ${buildout:bin-directory}/start_replication_script
target-executable = 1

[loggly_pipe.service]
<= config-from-template

[penstock.yaml]
<= config-from-template
auctions_db =
prefix =
    replication_0:
      sources:
       - url: http://${project:couchdb_admin}:${project:couchdb_password}@localhost:${couchdb.ini:port}/${project:auctions_couchdb_databese_name}
      target: http://${project:couchdb_admin}:${project:couchdb_password}@localhost:${couchdb.ini:port}/${project:auctions_couchdb_databese_name}_secured
      admin: http://${project:couchdb_admin}:${project:couchdb_password}@localhost:${couchdb.ini:port}/

[autostart]
recipe = z3c.recipe.usercrontab
times = @reboot
command = ${buildout:directory}/bin/circusd --daemon
# command = ${buildout:directory}/bin/python_interpreter ${buildout:directory}/start.py

[awscli]
recipe = zc.recipe.egg
scripts = aws

[s3cmd]
recipe = zc.recipe.egg
scripts = s3cmd

[logrotate.conf]
<= config-from-template
host = ${project:logs_host}
region = ${project:logs_region}
uploader = ${project:logs_uploader}
logs_dir = ${project:logs_dir}
logs_bucket = ${project:logs_bucket}
aws_access_key = ${project:aws_access_key}
aws_secret_key = ${project:aws_secret_key}

[logrotate-hourly]
recipe = z3c.recipe.usercrontab
times = @hourly
command = /usr/sbin/logrotate --state ${buildout:directory}/var/logrotate.status ${buildout:directory}/etc/logrotate.conf >>${buildout:directory}/var/log/logrotate.log 2>&1
